set nocompatible

if has('nvim')
  set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}
  let g:neomake_javascript_enabled_makers=['eslint']
  let g:neomake_jsx_enabled_makers=['eslint']

  autocmd! BufWritePost,BufReadPost * Neomake

  " DevIcon
  let g:webdevicons_conceal_nerdtree_brackets=1
endif


" == elm
let g:elm_format_autosave=1

" == Airiline settings
let g:airline_powerline_fonts=1
let g:airline_theme='badwolf'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'

let g:tmuxline_powerline_separators=1

" == NERDTree
let NERDTreeShowHidden=1
map <silent> <F3> :NERDTreeToggle<CR>
nmap <silent> <F2> :NERDTreeFind<CR>


" == Fzf
let g:fzf_command_prefix = 'Fzf'

" Session Management
" automatically load and save session on start/exit.
" Modified by robin burchell <w00t@inspircd.org> to only load/save sessions if started with no arguments.
function! MakeSession()
  if g:sessionfile != ""
    echo "Saving."
    if (filewritable(g:sessiondir) != 2)
      exe 'silent !mkdir -p ' g:sessiondir
      redraw!
    endif
    exe "mksession! " . g:sessionfile
  endif
endfunction

function! LoadSession()
  if argc() == 0
    let g:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    let g:sessionfile = g:sessiondir . "/session.vim"
    if (filereadable(g:sessionfile))
      exe 'source ' g:sessionfile
    else
      echo "No session loaded."
    endif
  else
    let g:sessionfile = ""
    let g:sessiondir = ""
  endif
endfunction

au VimEnter * nested :call LoadSession()
au VimLeave * :call MakeSession()




" Settings
set backupdir=~/.vimfiles/backup/
set directory=~/.vimfiles/backup/
set backupcopy=yes
set fileencoding=utf-8
set hidden
set hlsearch
set incsearch
set ignorecase
set smartcase
set nu
set mouse=
set clipboard+=unnamedplus
set guifont=DroidSansMonoForPowerline\ Nerd\ Font:h12
" Position splits below and right
set splitright
set splitbelow

filetype plugin indent on

" Visual
syntax on
set completeopt=menu
set gcr=a:blinkon1
set tabstop=2
set softtabstop=0
set shiftwidth=2
set autoindent
set expandtab
set visualbell
set t_Co=256
set termguicolors
colorscheme molokai
highlight ColorColumn ctermbg=darkgrey
highlight Directory ctermfg=grey

" Powerline
set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
set laststatus=2


" Bindings
let mapleader = "\<space>"
let g:mapleader = "\<space>"
nmap <silent> <F9> :Gblame<CR>
nmap <Tab> :b#<CR>
tmap <Esc> <C-\><C-n><cr>
nmap <silent> <C-j> :+10<CR>
vmap <silent> <C-j> 10j<CR>
nnoremap <silent> <C-k> :-10<CR>
vnoremap <silent> <C-k> 10k<CR>

" == scrooloose/nerdtree ==
nmap <silent> <Leader>t :!npm run test<CR>
nmap <silent> <M-w> :bp\|bd#<CR>
nmap <silent> <M-k> :wincmd k<CR>
nmap <silent> <M-j> :wincmd j<CR>
nmap <silent> <M-h> :wincmd h<CR>
nmap <silent> <M-l> :wincmd l<CR>
nmap <silent> <Leader><Esc> :noh<CR>

set pastetoggle=<F4>

" == Identation and Spaces
autocmd FileType html,htmldjango,css,scss,less,sass,stylus,json,javascript,coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 colorcolumn=80
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4 colorcolumn=80

" == Filetypes
autocmd BufRead,BufNewFile *.jsx,*.ejs set filetype=javascript
autocmd BufRead,BufNewFile *.md,markdown,*.mkd setlocal syntax=markdown
autocmd BufRead,BufNewFile *.json set filetype=json

" == Autoreload file
set autoread
au CursorMoved,CursorHold,FocusGained,BufEnter,InsertEnter * :checkt

" Autochange currdir
autocmd BufEnter * silent! lcd %:p:h

" Highlight current line
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" == ctrlp
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|meteor)$|node_modules'
let g:ctrlp_max_height=25
let g:ctrlp_clear_cache_on_exit=0
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40

if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Ack
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
let g:ack_autoclose = 1


" Rooter
" make rooter set working folder to a one that contains .git
let g:rooter_patterns = ['Rakefile', '.git/']
let g:rooter_silent_chdir = 1

" Remember last location in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal g'\"" | endif


" Better Whitespace
autocmd FileType sh,css,sass,less,scss,coffee,python,html,javascript,htmldjango,markdown autocmd BufWritePre <buffer> StripWhitespace

" Autocomplete with tern
set omnifunc=syntaxcomplete#Complete
let g:tern_map_keys=1
let g:tern_show_argument_hints="on_hold"

" let g:neomake_javascript_eslint_exe = '/Users/dimitarapostolov/.npm/eslint'

" vim-json
nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
let g:vim_json_syntax_conceal=0

" CSSComb

autocmd BufWritePre,FileWritePre *.css,*.less,*.scss,*.sass silent! :CSScomb

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Try to improve scrolling speed
set lazyredraw

if !has('nvim')
  set ttyfast
endif
