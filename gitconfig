[core]
  excludesfile = ~/.gitignore
  quotepath = false
	filemode = false
[user]
	name = Dimitar Apostolov
  email =
  useconfigonly = true
[merge]
  ff = no
  tool = vimdiff
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[mergetool]
  prompt = true
[mergetool "vimdiff"]
  cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[filter "lfs"]
  smudge = git-lfs smudge %f
  required = true
  clean = git-lfs clean %f
[alias]
  cp = cherry-pick
  co = checkout
  gone = "!sh -c 'git branch | grep -v \"\\*\" | grep -v master | grep -v develop | grep -v staging | xargs -n 1 git branch -D'"
  richlog = log --all --graph --decorate --oneline --simplify-by-decoration
  update = "!sh -c 'git fetch --prune && git pull --rebase'"
  rot = "!sh -c 'git diff-index HEAD --quiet --exit-code; NEEDS_STASH=$?; if [ \"$NEEDS_STASH\" -eq \"1\" ] ; then git stash; else echo \"Nothing to stash.\"; fi; git checkout \"$0\" && git pull --rebase origin \"$0\";git co -;git rebase - && if [ \"$NEEDS_STASH\" -eq \"1\" ] ; then git stash pop; fi;'"
  roti = "!sh -c 'git rebase -i HEAD~$(git rev-list --count $0..HEAD)'"
  cbn = "!sh -c 'git symbolic-ref --short HEAD | pbcopy'"
  ss = stash save -u
  sl = stash list
  sd = stash drop
  sa = stash apply
  sp = stash pop
  ssh = stash show
  db = branch -D
  rb = branch -m
  rcb = "!sh -c 'CURRENT_BRANCH=$(git symbolic-ref --short HEAD ) &&  git rb $CURRENT_BRANCH $0 && unset CURRENT_BRANCH'"
  unstage = reset HEAD
  bm = "!sh -c 'git branch --merged | grep -v \"\\*\" | grep -v master | grep -v edge | grep -v develop | grep -v staging'"
  cm = "!sh -c 'git bm | xargs -n 1 git branch -d'"
  ulc = reset --soft HEAD~ #undoes the last, not-pushed commit
  pss = "push -u origin HEAD"
  deployed = "!f(){ git branch -r --contains $1 | cut -f1 -d'/' | sort | uniq; }; f"
  ri = "!sh -c 'git rebase -i HEAD~$0'"
  ai = add -i
  ls = "!sh -c 'git branch | fzf-tmux -d 20 | xargs -ro git checkout'"
  lsr = "!sh -c 'git branch -r | fzf-tmux -d 20 | sed \"s/origin\\///g\" | xargs -ro git checkout'"
  cc = "!sh -c 'git cherry -v $0 | grep +'"
  commend = commit --amend --no-edit
  please = push --force-with-lease origin HEAD
  st = status --short --branch
  cam = commit -am
  lb = "!sh -c 'git shortlog -s | sort -nr'"
  debranch = "!sh -c 'git branch | grep -v master | xargs git branch -D'"
  cim = commit -m
  dc = "!sh -c 'git diff --name-only $0 | wc -l'"
; This will show you all the commits at the tips of your commit graph which are no longer referenced from any branch or tag 
; every lost commit, including every stash commit youâ€™ve ever created, will be somewhere in that graph.
  detached-commits = "!sh -c 'git log $0 --oneline --decorate $( git fsck --no-reflog | awk \"/dangling commit/ {print \\$3}\" )'"
	mt = mergetool
[help]
  autocorrect = 0
[init]
  templatedir = ~/.git_templates
[includeIf "gitdir:~/Work/job/git/"]
  path = ~/Work/job/git/.gitconfig
